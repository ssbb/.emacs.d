#+TITLE: DotEmacs
#+AUTHOR: Sviatoslav Bulbakha

* Bootstrap
** User info

   #+BEGIN_SRC emacs-lisp
     (setq user-full-name "Sviatoslav Bulbakha"
           user-mail-address "mail@ssbb.me")
   #+END_SRC

** Use better defaults

   Cleanup UI a bit.

   #+BEGIN_SRC emacs-lisp
     (when window-system
       (blink-cursor-mode 0)
       (scroll-bar-mode 0)
       (tool-bar-mode 0)
       (tooltip-mode nil))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (setq-default inhibit-startup-message t
                   inhibit-default-init t
                   initial-scratch-message nil
                   ring-bell-function 'ignore
                   make-backup-files nil
                   create-lockfiles nil
                   indent-tabs-mode nil)

     (defalias 'yes-or-no-p 'y-or-n-p)
     (set-default-coding-systems 'utf-8)
     (global-subword-mode 1)
     (cd "~/")
   #+END_SRC

   Garbage-collect on focus-out.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'focus-out-hook #'garbage-collect)
   #+END_SRC

   Kill current buffer w/o prompt

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-x k") 'kill-this-buffer)
   #+END_SRC

   Indent with RET

   #+BEGIN_SRC emacs-lisp
     (define-key global-map (kbd "RET") 'newline-and-indent)
   #+END_SRC

   Trim whitespaces on save

   #+BEGIN_SRC emacs-lisp
     (add-hook 'before-save-hook 'delete-trailing-whitespace)
   #+END_SRC

** Load .custom.el
   #+BEGIN_SRC emacs-lisp
     (setq-default custom-file (expand-file-name ".custom.el" user-emacs-directory))
     (when (file-exists-p custom-file)
       (load custom-file))
   #+END_SRC
* Theme
  #+BEGIN_SRC emacs-lisp
    (use-package color-theme-sanityinc-tomorrow
      :config
      (load-theme 'sanityinc-tomorrow-night t))
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
    (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
    (add-to-list 'default-frame-alist '(ns-appearance . dark))
    (add-to-list 'default-frame-alist '(height . 35))
    (add-to-list 'default-frame-alist '(width . 130))
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
    (set-face-attribute 'default nil
                        :family "Iosevka"
                        :height 130
                        :weight 'normal
                        :width 'normal)
  #+END_SRC

*** Modeline
    #+BEGIN_SRC emacs-lisp
      (use-package doom-modeline
        :ensure t
        :hook (after-init . doom-modeline-mode))
    #+END_SRC

* Languages
** Org
   #+BEGIN_SRC emacs-lisp
     (use-package org
       :config
       (setq org-src-tab-acts-natively t))
   #+END_SRC

   Useful function to archive all matching tasks.

   #+BEGIN_SRC emacs-lisp
     (defun org-archive-tasks (state)
       (interactive "s Enter State: ")
       (org-map-entries
        (lambda ()
          (org-archive-subtree)
          (setq org-map-continue-from (outline-previous-heading)))
        (concat "/" state) 'tree))
   #+END_SRC
** HTML
   #+BEGIN_SRC emacs-lisp
     (use-package web-mode
       :mode ("\\.html\\'" "\\.eex\\'")
       :config
       (setq web-mode-engines-alist
             '(("django"    . "\\.html\\'")))

       (setq web-mode-markup-indent-offset 2
             web-mode-css-indent-offset 2
             web-mode-code-indent-offset 2)

       (add-to-list 'auto-mode-alist '("\\.html.eex\\'" . web-mode)))

     (use-package emmet-mode
       :hook (web-mode . emmet-mode))
   #+END_SRC
** Javascript
   #+BEGIN_SRC emacs-lisp
     (use-package js2-mode
       :mode "\\.js\\'")

     (setq js-indent-level 2)
   #+END_SRC
** CSS
   #+BEGIN_SRC emacs-lisp
     (setq css-indent-offset 2)
   #+END_SRC
** Elixir
   #+BEGIN_SRC emacs-lisp
     (use-package elixir-mode
       :config
       (add-hook 'before-save-hook 'lsp-format-buffer))

     (eval-after-load "elixir-mode"
       '(defun elixir-format--mix-executable ()
          (string-trim-right (shell-command-to-string "asdf which mix"))))
   #+END_SRC
** Python
   #+BEGIN_SRC emacs-lisp
     (use-package elpy
       :config
       (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
       (add-hook 'elpy-mode-hook 'flycheck-mode)
       (elpy-enable))

     (use-package py-autopep8
       :hook (elpy-mode . py-autopep8-enable-on-save))

     (use-package pyenv-mode)

     (use-package pyenv-mode-auto
       :after pyenv-mode)
   #+END_SRC
** YAML
   #+BEGIN_SRC emacs-lisp
     (use-package yaml-mode)
   #+END_SRC
** Elm
   #+BEGIN_SRC emacs-lisp
     (use-package elm-mode)
   #+END_SRC
* Features
** Helm
   #+BEGIN_SRC emacs-lisp
     (use-package helm
       :bind (("M-x" . helm-M-x)
              ("C-x r b" . helm-filtered-bookmarks)
              ("C-x C-f" . helm-find-files)
              ("M-y" . helm-show-kill-ring)
              ("C-x b" . helm-buffers-list)
              ("C-c r" . helm-recentf))
       :config
       (require 'helm-config)
       (setq helm-quick-update t)
       (setq helm-buffers-fuzzy-matching t)
       (helm-mode 1))
   #+END_SRC
*** Plugins
    #+BEGIN_SRC emacs-lisp
      ;; Using Silver Searchger for search within a project
      (use-package helm-ag
        :after helm)

      (use-package helm-projectile
        :config
        (setq projectile-enable-caching t)
        (helm-projectile-on))

      (use-package helm-rage
        :init
        (define-key global-map (kbd "C-c r") 'helm-rage))
    #+END_SRC

** PATH
   Use system =$PATH=.

   #+BEGIN_SRC emacs-lisp
     (use-package exec-path-from-shell
       :config
       (exec-path-from-shell-initialize))
   #+END_SRC
** Projectile
   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :config
       (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
       (setq projectile-mode-line-function (lambda () (format " P[%s]" (projectile-project-name))))

       (projectile-mode))
   #+END_SRC
** Line numbers
   #+BEGIN_SRC emacs-lisp
     (require 'display-line-numbers)
     (setq display-line-numbers-type 'relative)
     (global-display-line-numbers-mode)
   #+END_SRC
** Magit
   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :bind (("C-c g" . magit)))
   #+END_SRC
** Window numbers
   #+BEGIN_SRC emacs-lisp
     (use-package winum
       :no-require t
       :config
       (setq winum-keymap
             (let ((map (make-sparse-keymap)))
               (define-key map (kbd "C-`") 'winum-select-window-by-number)
               (define-key map (kbd "C-Â²") 'winum-select-window-by-number)
               (define-key map (kbd "M-0") 'winum-select-window-0-or-10)
               (define-key map (kbd "M-1") 'winum-select-window-1)
               (define-key map (kbd "M-2") 'winum-select-window-2)
               (define-key map (kbd "M-3") 'winum-select-window-3)
               (define-key map (kbd "M-4") 'winum-select-window-4)
               (define-key map (kbd "M-5") 'winum-select-window-5)
               (define-key map (kbd "M-6") 'winum-select-window-6)
               (define-key map (kbd "M-7") 'winum-select-window-7)
               (define-key map (kbd "M-8") 'winum-select-window-8)
               map))
       (require 'winum)
       (winum-mode))
   #+END_SRC
** Undo Tree
   #+BEGIN_SRC emacs-lisp
     (use-package undo-tree
       :config
       (global-undo-tree-mode))
   #+END_SRC
** Expand region
   #+BEGIN_SRC emacs-lisp
     (use-package expand-region
       :bind (("C-=" . er/expand-region)))
   #+END_SRC
** Parens
   #+BEGIN_SRC emacs-lisp
     (require 'paren)
     (setq show-paren-delay 0)
     (show-paren-mode 1)
   #+END_SRC
** Linting
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :config
       (global-flycheck-mode))

     (use-package flycheck-pos-tip
       :after (flycheck)
       :config
       (with-eval-after-load 'flycheck
         (flycheck-pos-tip-mode)))
   #+END_SRC
** Snippets
   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :config
       (yas-global-mode 1))

     (use-package yasnippet-snippets
       :after (yasnippet))
   #+END_SRC
** Auto-completion
   #+BEGIN_SRC emacs-lisp
     (use-package company
       :custom
       (company-tooltip-align-annotations t)
       :bind
       ("M-o" . company-complete))

     (use-package company-box
       :hook (company-mode . company-box-mode)
       :config
       ;; Prettify icons
       (defun my-company-box-icons--elisp (candidate)
         (when (derived-mode-p 'emacs-lisp-mode)
           (let ((sym (intern candidate)))
             (cond ((fboundp sym) 'Function)
                   ((featurep sym) 'Module)
                   ((facep sym) 'Color)
                   ((boundp sym) 'Variable)
                   ((symbolp sym) 'Text)
                   (t . nil)))))
       (advice-add #'company-box-icons--elisp :override #'my-company-box-icons--elisp)

       (when (and (display-graphic-p)
                  (require 'all-the-icons nil t))
         (declare-function all-the-icons-faicon 'all-the-icons)
         (declare-function all-the-icons-material 'all-the-icons)
         (declare-function all-the-icons-octicon 'all-the-icons)
         (setq company-box-icons-all-the-icons
               `((Unknown . ,(all-the-icons-material "find_in_page" :height 0.9 :v-adjust -0.2))
                 (Text . ,(all-the-icons-faicon "text-width" :height 0.85 :v-adjust -0.05))
                 (Method . ,(all-the-icons-faicon "cube" :height 0.85 :v-adjust -0.05 :face 'all-the-icons-purple))
                 (Function . ,(all-the-icons-faicon "cube" :height 0.85 :v-adjust -0.05 :face 'all-the-icons-purple))
                 (Constructor . ,(all-the-icons-faicon "cube" :height 0.85 :v-adjust -0.05 :face 'all-the-icons-purple))
                 (Field . ,(all-the-icons-octicon "tag" :height 0.85 :v-adjust 0 :face 'all-the-icons-lblue))
                 (Variable . ,(all-the-icons-octicon "tag" :height 0.85 :v-adjust 0 :face 'all-the-icons-lblue))
                 (Class . ,(all-the-icons-material "settings_input_component" :height 0.9 :v-adjust -0.2 :face 'all-the-icons-orange))
                 (Interface . ,(all-the-icons-material "share" :height 0.9 :v-adjust -0.2 :face 'all-the-icons-lblue))
                 (Module . ,(all-the-icons-material "view_module" :height 0.9 :v-adjust -0.2 :face 'all-the-icons-lblue))
                 (Property . ,(all-the-icons-faicon "wrench" :height 0.85 :v-adjust -0.05))
                 (Unit . ,(all-the-icons-material "settings_system_daydream" :height 0.9 :v-adjust -0.2))
                 (Value . ,(all-the-icons-material "format_align_right" :height 0.9 :v-adjust -0.2 :face 'all-the-icons-lblue))
                 (Enum . ,(all-the-icons-material "storage" :height 0.9 :v-adjust -0.2 :face 'all-the-icons-orange))
                 (Keyword . ,(all-the-icons-material "filter_center_focus" :height 0.9 :v-adjust -0.2))
                 (Snippet . ,(all-the-icons-material "format_align_center" :height 0.9 :v-adjust -0.2))
                 (Color . ,(all-the-icons-material "palette" :height 0.9 :v-adjust -0.2))
                 (File . ,(all-the-icons-faicon "file-o" :height 0.9 :v-adjust -0.05))
                 (Reference . ,(all-the-icons-material "collections_bookmark" :height 0.9 :v-adjust -0.2))
                 (Folder . ,(all-the-icons-faicon "folder-open" :height 0.9 :v-adjust -0.05))
                 (EnumMember . ,(all-the-icons-material "format_align_right" :height 0.9 :v-adjust -0.2 :face 'all-the-icons-lblue))
                 (Constant . ,(all-the-icons-faicon "square-o" :height 0.9 :v-adjust -0.05))
                 (Struct . ,(all-the-icons-material "settings_input_component" :height 0.9 :v-adjust -0.2 :face 'all-the-icons-orange))
                 (Event . ,(all-the-icons-faicon "bolt" :height 0.85 :v-adjust -0.05 :face 'all-the-icons-orange))
                 (Operator . ,(all-the-icons-material "control_point" :height 0.9 :v-adjust -0.2))
                 (TypeParameter . ,(all-the-icons-faicon "arrows" :height 0.85 :v-adjust -0.05))
                 (Template . ,(all-the-icons-material "format_align_center" :height 0.9 :v-adjust -0.2)))
               company-box-icons-alist 'company-box-icons-all-the-icons)))
   #+END_SRC
** Prettier
   #+BEGIN_SRC emacs-lisp
     (use-package prettier-js
       :config
       (add-hook 'js2-mode-hook 'prettier-js-mode)
       (add-hook 'css-mode-hook 'prettier-js-mode)
       (add-hook 'js-mode-hook 'prettier-js-mode)
       (add-hook 'typescript-mode-hook 'prettier-js-mode))
   #+END_SRC
** Comments
   #+BEGIN_SRC emacs-lisp
     (use-package evil-nerd-commenter
       :config
       (evilnc-default-hotkeys))
   #+END_SRC
** Language Server Protocol
   #+BEGIN_SRC emacs-lisp
     (use-package lsp-mode
       :hook ((elixir-mode . lsp)
              (elm-mode . lsp))
       :commands lsp
       :config
       (setq lsp-prefer-flymake nil
             lsp-enable-file-watchers nil))

     (use-package lsp-ui
       :config
       (setq lsp-ui-doc-enable nil
             lsp-ui-sideline-enable nil
             lsp-ui-peek-enable nil
             lsp-ui-flycheck-enable t))
     (use-package company-lsp
       :config
       (push 'company-lsp company-backends))
   #+END_SRC



